---
- name: reset local collections variables
  set_fact:
    unsorted_images_tags_collection: []
    images_digests_tags_collection: []

- name: collect tags metadata from secured registry
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ metadata_repo }}/manifests/{{ item }}"
    method: GET
    user: "{{ registry_username }}"
    password: "{{ registry_password }}"
    force_basic_auth: yes
    return_content: yes
    status_code: 200,201,302
  register: tags_metadata_from_secured
  ignore_errors: True
  with_items: "{{ metadata_tags }}"
  when:
  - managed_registry_secured
  no_log: True

- name: collect tags metadata from insecured registry
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ metadata_repo }}/manifests/{{ item }}"
    method: GET
    return_content: yes
    status_code: 200,201,302
  register: tags_metadata_from_insecured
  ignore_errors: True
  with_items: "{{ metadata_tags }}"
  when:
  - not managed_registry_secured
  no_log: True

- name: merge tags metadata from secured source
  set_fact:
    tags_metadata: "{{ tags_metadata_from_secured }}"
  when:
  - managed_registry_secured
  no_log: True

- name: merge tags metadata from insecured source
  set_fact:
    tags_metadata: "{{ tags_metadata_from_insecured }}"
  when:
  - not managed_registry_secured
  no_log: True

- name: debug retrieved tags metadata content
  vars:
    metadata_results: "{{ (tags_metadata.results | from_json) }}"
  debug:
    var: metadata_results
    verbosity: 3
#  when:
#  - tags_metadata is success

- name: produce tags array with creation dates
  set_fact:
    unsorted_images_tags_collection: "{{ 
      unsorted_images_tags_collection + [
        {
          'repo_name': metadata_repo,
          'repo_tag': (item.content | from_json).tag ,
          'tag_created': ((item.content | from_json).history[0].v1Compatibility | from_json).created
        }
      ]
    }}"
  with_items:
  - "{{ tags_metadata.results }}"
  when:
  - (item.content | from_json).tag is defined
  no_log: True

- name: filtering and sorting repos tags array
  set_fact:
    sorted_images_tags_collection: "{{ (unsorted_images_tags_collection | list | sort(attribute='tag_created'))[:-(managed_registry_keep_tags | int)] | list }}"
  when:
  no_log: True

- name: debug sorted and filtered tags aray
  debug:
    var: sorted_images_tags_collection
    verbosity: 2

- name: collect images digests from secured registry
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ item.repo_name }}/manifests/{{ item.repo_tag }}"
    method: GET
    headers:
      Accept: "application/vnd.docker.distribution.manifest.v2+json"
    user: "{{ registry_username }}"
    password: "{{ registry_password }}"
    force_basic_auth: yes
    status_code: 200,201,302
  register: filtered_images_digests_from_secured
  ignore_errors: True
  with_items: "{{ sorted_images_tags_collection | default([]) | list }}"
  when:
  - managed_registry_secured
  - (sorted_images_tags_collection | default([]) | list | length) > 0
  no_log: True

- name: collect images digests from insecured registry
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ item.repo_name }}/manifests/{{ item.repo_tag }}"
    method: GET
    headers:
      Accept: "application/vnd.docker.distribution.manifest.v2+json"
    status_code: 200,201,302
  register: filtered_images_digests_from_insecured
  ignore_errors: True
  with_items: "{{ sorted_images_tags_collection | default([]) | list }}"
  when:
  - not managed_registry_secured
  - (sorted_images_tags_collection | default([]) | list | length) > 0
  no_log: True

- name: merge images digests form secured source
  set_fact:
    filtered_images_digests: "{{ filtered_images_digests_from_secured | default(omit) }}"
  when:
  - managed_registry_secured
  no_log: True

- name: merge images digests form insecured source
  set_fact:
    filtered_images_digests: "{{ filtered_images_digests_from_insecured | default(omit) }}"
  when:
  - not managed_registry_secured
  no_log: True

- name: debug retrieved images digests
  vars:
    image_digest_item: "{{ filtered_images_digests.results | default([]) | list }}"
  debug:
    var: image_digest_item
    verbosity: 2
#  when:
#  - filtered_images_digests is success

- name: produce tags array with images digests
  set_fact:
    images_digests_tags_collection: "{{ 
      images_digests_tags_collection + [
        {
          'repo_name': metadata_repo,
          'repo_tag': item.item.repo_tag,
          'image_digest': item.docker_content_digest
        }
      ]
    }}"
  with_items:
  - "{{ filtered_images_digests.results | default([]) | list }}"
  when:
  - item.item.repo_tag is defined
  no_log: True

- name: debug retrieved images digests for removal
  debug:
    var: images_digests_tags_collection
    verbosity: 1

- name: accumulate digests for removal in global array
  set_fact:
    images_digests_removal_collection: "{{ (images_digests_removal_collection + (images_digests_tags_collection | default([])) ) | list }}"
  when:
  - not (((images_digests_removal_collection + (images_digests_tags_collection | default([]) | list) ) | list | length) >= (managed_cleanup_batch_size | int))
  no_log: True

- name: debug accumulated batch size collection size
  debug:
    msg: "Accumulated digests batch size after '{{ metadata_repo }}': {{ images_digests_removal_collection | default([]) | list | length }}"
