---
################################PERFORM CATALOG DISCOVERY##############################

- name: handle secured digests collection
  command: /bin/true
  notify:
  - collect repositories from secured registry catalog
  - debug raw catalog retieval result
  - produce unfiltered dict with retrieved repos
  - produce filtered repositories array
  - debug filtered repositories array
  - collect images tags from secured registry
  - extract repos tags maps from retrived json
  - debug extracted repos tags
  - debug outer loop data for tag metadata collector
  - include nested per repo tag metadata collector
  when:
    - managed_registry_secured
  
- name: handle insecured digests collection
  command: /bin/true
  notify:
  - collect repositories from insecured registry catalog
  - debug raw catalog retieval result
  - produce unfiltered dict with retrieved repos
  - produce filtered repositories array
  - debug filtered repositories array
  - collect images tags from insecured registry
  - extract repos tags maps from retrived json
  - debug extracted repos tags
  - debug outer loop data for tag metadata collector
  - include nested per repo tag metadata collector
  when:
    - not managed_registry_secured

- name: collect repositories from secured registry catalog
  uri:
    url: "{{ managed_registry_http_url }}/v2/_catalog?n={{ managed_catalog_pagination }}"
    method: GET
    headers:
      Accept: "application/json; charset=utf-8"
    user: "{{ registry_username }}"
    password: "{{ registry_password }}"
    force_basic_auth: yes
    return_content: yes
    status_code: 200,201,302
  register: list_repositories
  retries: 1
  delay: 2
  until: list_repositories is success
  ignore_errors: yes

- name: collect repositories from insecured registry catalog
  uri:
    url: "{{ managed_registry_http_url }}/v2/_catalog?n={{ managed_catalog_pagination }}"
    method: GET
    headers:
      Accept: "application/json; charset=utf-8"
    return_content: yes
    status_code: 200,201,302
  register: list_repositories
  ignore_errors: yes

- name: debug raw catalog retieval result
  vars:
    raw_catalog_list_result: "{{ list_repositories.json }}"
  debug:
    var: raw_catalog_list_result
    verbosity: 2
  when:
  - list_repositories is success

- name: produce unfiltered dict with retrieved repos
  set_fact:
    unfiltered_reposortories_list: "{{
      unfiltered_reposortories_list + [
        { 'name': item }
      ]
    }}"
  with_items:
  - "{{ list_repositories.json.repositories | default([]) }}"
  when:
  - list_repositories is success

- name: produce filtered repositories array
  vars:
    repo_search_pattern: "{{ item.name }}"
  set_fact:
    filtered_reposortories_list: "{{ filtered_reposortories_list +
        (unfiltered_reposortories_list | selectattr('name', 'search', repo_search_pattern) | list)
    }}"
  with_items:
  - "{{ managed_registry_folders | list }}"

- name: debug filtered repositories array
  vars:
    filtered_array_item: "{{ item }}"
  debug:
    var: filtered_array_item
    verbosity: 1
  with_items:
  - "{{ (filtered_reposortories_list | default([]) | list ) }}"

- name: collect images tags from secured registry
  vars:
    filtered_array_item: "{{ item.name }}"
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ filtered_array_item }}/tags/list"
    method: GET
    user: "{{ registry_username }}"
    password: "{{ registry_password }}"
    force_basic_auth: yes
    status_code: 200,201,302
  register: images_tags
  retries: 1
  delay: 2
  until: images_tags is success
  ignore_errors: yes
  with_items:
  - "{{ (filtered_reposortories_list | default([]) | list ) }}"

- name: collect images tags from insecured registry
  vars:
    filtered_array_item: "{{ item.name }}"
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ filtered_array_item }}/tags/list"
    method: GET
    status_code: 200,201,302
  register: images_tags
  retries: 1
  delay: 2
  until: images_tags is success
  ignore_errors: yes
  with_items:
  - "{{ (filtered_reposortories_list | default([]) | list ) }}"

- name: extract repos tags maps from retrived json
  set_fact:
    extracted_managed_repos_tags: "{{ extracted_managed_repos_tags | combine({ item.json.name: item.json.tags }) }}"
  with_items:
  - "{{ images_tags.results | default([]) }}"
  when:
  - images_tags is success
  - ( ((item.json.tags | list | length | int) > (managed_registry_keep_tags | int)) | bool )
  no_log: True

- name: debug extracted repos tags
  debug:
    var: extracted_managed_repos_tags
    verbosity: 1

- name: debug outer loop data for tag metadata collector
  vars:
    outer_loop_data: "{{ extracted_managed_repos_tags }}"
  debug:
    var: outer_loop_data
    verbosity: 2
  when:
  - images_tags is success

- name: include nested per repo tag metadata collector
  vars:
    metadata_repo: "{{ image_repo.key }}"
    metadata_tags: "{{ image_repo.value }}"
  include_tasks: collect_removal_digests.yaml
  with_items: "{{ extracted_managed_repos_tags | dict2items }}"
  loop_control:
    loop_var: image_repo
  when:
  - images_tags is success
#    - ( ((image_repo.value | list | length) > (managed_registry_keep_tags | int)) | bool )


################################PERFORM DIGEST REMOVAL##############################

- name: debug first records of accumualted removal collection
  vars:
    images_digests_removal_records: "{{ (images_digests_removal_collection | default([]) | list)[-200:] }}"
  debug:
    var: images_digests_removal_records

- name: handle accumulated removal digests from secured
  command: /bin/true
  notify:
  - delete images selected from secured registry
  - images digests tried to process
  - check delete images is supported by registry
  - handle registry garbage collection
  when:
  - ( images_digests_removal_collection | default([]) | list | length ) > 0
  - not (managed_dry_run_mode | default(False) | bool)

- name: handle accumulated removal digests from insecured
  command: /bin/true
  notify:
  - delete images selected from insecured registry
  - images digests tried to process
  - check delete images is supported by registry
  - handle registry garbage collection
  when:
  - ( images_digests_removal_collection | default([]) | list | length ) > 0
  - not (managed_dry_run_mode | default(False) | bool)

- name: delete images selected from secured registry
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ item.repo_name }}/manifests/{{ item.image_digest }}"
    method: DELETE
    user: "{{ registry_username }}"
    password: "{{ registry_password }}"
    force_basic_auth: yes
    status_code: 202
  register: delete_images
  ignore_errors: yes
  retries: 1
  delay: 2
  until: delete_images is success
  with_items:
  - "{{ (images_digests_removal_collection | default([]) | list ) }}"
  no_log: True

- name: delete images selected from insecured registry
  uri:
    url: "{{ managed_registry_http_url }}/v2/{{ item.repo_name }}/manifests/{{ item.image_digest }}"
    method: DELETE
    status_code: 202
  register: delete_images
  ignore_errors: yes
  retries: 1
  delay: 2
  until: delete_images is success
  with_items:
  - "{{ (images_digests_removal_collection | default([]) | list ) }}"
  no_log: True

- name: images digests tried to process
  set_fact:
    digests_delete_processed_results: "{{ delete_images.results }}"
  when:
  - (delete_images.results | list | length) > 0

- name: check delete images is supported by registry
  debug:
    msg: "Registry has disabled DELETE method, Please add ENV: REGISTRY_STORAGE_DELETE_ENABLED=true to registry runtime"
  failed_when: true
  when:
  - delete_images is failed
  - "'HTTP Error 405' in (delete_images.results | first).msg"
  - "'Method Not Allowed' in (delete_images.results | first).msg"

- name: handle registry garbage collection
  command: /bin/true
  notify:
  - stop registry service for cold gc
  - ensure garbage collector log dir
  - execute garbage collector script
  - start registry service
  when:
  - garbage_collector_enabled
  - (delete_images is success) or garbage_collector_ignore_failures

- name: stop registry service for cold gc
  shell: |
    systemctl stop {{ registry_service }}
  become: yes

- name: ensure garbage collector log dir
  file:
    path: "{{ garbage_collector_log_dir }}"
    state: directory
    mode: 644
  become: yes

- name: execute garbage collector script
  vars:
    gc_log_file: "{{ garbage_collector_log_dir }}/garbage-collector.log"
  shell: |
    {{ garbage_collector_script }} 2>&1 1>{{ gc_log_file }} || true
  ignore_errors: yes
  become: yes
  no_log: True

- name: start registry service
  shell: |
    systemctl start {{ registry_service }}
  become: yes

- name: handle playbook report processing
  command: /bin/true
  notify:
  - debug digests delete processed results
  - produce registry cleaner summary stats
  - produce registry cleaner summary report

- name: debug digests delete processed results
  debug:
    var: digests_delete_processed_results
    verbosity: 3

- name: produce registry cleaner summary stats
  set_fact:
    images_digests_removal_total: "{{ digests_delete_processed_results | list | length }}"
    images_digests_removal_stats:
      success: "{% if not (managed_dry_run_mode | bool) %}{{ digests_delete_processed_results | list | selectattr('failed', 'equalto', False) | list | length }}{% else %}0{% endif %}"
      failed: "{% if not (managed_dry_run_mode | bool) %}{{ digests_delete_processed_results | list | selectattr('failed', 'equalto', True) | list | length }}{% else %}0{% endif %}"

- name: produce registry cleaner summary report
  vars:
    registry_cleanup_process_mode: "{% if (managed_dry_run_mode | bool) %}dry_run{% else %}delete{% endif %}"
    images_digests_removal_statistic:
    - "Registry cleanup summary report:"
    - "  Registry cleanup process mode: {{ registry_cleanup_process_mode }}"
    - "  Force registry garbage collection: {{ garbage_collector_enabled | lower }}"
    - "  Selected repositories to process: {{ filtered_reposortories_list | length }}"
    - "  Repositories having tags to delete: {{ extracted_managed_repos_tags| length }}"
    - "  Repositories digests collected total: {{ images_digests_removal_total | int }}"
    - "  Repositories digests removal success: {{ images_digests_removal_stats.success | int }}"
    - "  Repositories digests removal failed: {{ images_digests_removal_stats.failed | int }}"
  debug:
    msg: "{{ images_digests_removal_statistic | list }}"
